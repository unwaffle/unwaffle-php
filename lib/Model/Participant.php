<?php
/**
 * Participant
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Unwaffle
 *
 * The [Unwaffle](https://unwaffle.com) API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Participant Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Participant implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Participant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'participant_identifier' => 'string',
        'participant_username' => 'string',
        'participant_full_name' => 'string',
        'participant_email' => 'string',
        'participant_photo_url' => 'string',
        'participant_status' => 'string',
        'participant_signup_date' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'participant_identifier' => 'ParticipantIdentifier',
        'participant_username' => 'ParticipantUsername',
        'participant_full_name' => 'ParticipantFullName',
        'participant_email' => 'ParticipantEmail',
        'participant_photo_url' => 'ParticipantPhotoUrl',
        'participant_status' => 'ParticipantStatus',
        'participant_signup_date' => 'ParticipantSignupDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'participant_identifier' => 'setParticipantIdentifier',
        'participant_username' => 'setParticipantUsername',
        'participant_full_name' => 'setParticipantFullName',
        'participant_email' => 'setParticipantEmail',
        'participant_photo_url' => 'setParticipantPhotoUrl',
        'participant_status' => 'setParticipantStatus',
        'participant_signup_date' => 'setParticipantSignupDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'participant_identifier' => 'getParticipantIdentifier',
        'participant_username' => 'getParticipantUsername',
        'participant_full_name' => 'getParticipantFullName',
        'participant_email' => 'getParticipantEmail',
        'participant_photo_url' => 'getParticipantPhotoUrl',
        'participant_status' => 'getParticipantStatus',
        'participant_signup_date' => 'getParticipantSignupDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['participant_identifier'] = isset($data['participant_identifier']) ? $data['participant_identifier'] : null;
        $this->container['participant_username'] = isset($data['participant_username']) ? $data['participant_username'] : null;
        $this->container['participant_full_name'] = isset($data['participant_full_name']) ? $data['participant_full_name'] : null;
        $this->container['participant_email'] = isset($data['participant_email']) ? $data['participant_email'] : null;
        $this->container['participant_photo_url'] = isset($data['participant_photo_url']) ? $data['participant_photo_url'] : null;
        $this->container['participant_status'] = isset($data['participant_status']) ? $data['participant_status'] : null;
        $this->container['participant_signup_date'] = isset($data['participant_signup_date']) ? $data['participant_signup_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        if ($this->container['participant_identifier'] === null) {
            $invalid_properties[] = "'participant_identifier' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['participant_identifier'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets participant_identifier
     * @return string
     */
    public function getParticipantIdentifier()
    {
        return $this->container['participant_identifier'];
    }

    /**
     * Sets participant_identifier
     * @param string $participant_identifier
     * @return $this
     */
    public function setParticipantIdentifier($participant_identifier)
    {
        $this->container['participant_identifier'] = $participant_identifier;

        return $this;
    }

    /**
     * Gets participant_username
     * @return string
     */
    public function getParticipantUsername()
    {
        return $this->container['participant_username'];
    }

    /**
     * Sets participant_username
     * @param string $participant_username
     * @return $this
     */
    public function setParticipantUsername($participant_username)
    {
        $this->container['participant_username'] = $participant_username;

        return $this;
    }

    /**
     * Gets participant_full_name
     * @return string
     */
    public function getParticipantFullName()
    {
        return $this->container['participant_full_name'];
    }

    /**
     * Sets participant_full_name
     * @param string $participant_full_name
     * @return $this
     */
    public function setParticipantFullName($participant_full_name)
    {
        $this->container['participant_full_name'] = $participant_full_name;

        return $this;
    }

    /**
     * Gets participant_email
     * @return string
     */
    public function getParticipantEmail()
    {
        return $this->container['participant_email'];
    }

    /**
     * Sets participant_email
     * @param string $participant_email
     * @return $this
     */
    public function setParticipantEmail($participant_email)
    {
        $this->container['participant_email'] = $participant_email;

        return $this;
    }

    /**
     * Gets participant_photo_url
     * @return string
     */
    public function getParticipantPhotoUrl()
    {
        return $this->container['participant_photo_url'];
    }

    /**
     * Sets participant_photo_url
     * @param string $participant_photo_url
     * @return $this
     */
    public function setParticipantPhotoUrl($participant_photo_url)
    {
        $this->container['participant_photo_url'] = $participant_photo_url;

        return $this;
    }

    /**
     * Gets participant_status
     * @return string
     */
    public function getParticipantStatus()
    {
        return $this->container['participant_status'];
    }

    /**
     * Sets participant_status
     * @param string $participant_status
     * @return $this
     */
    public function setParticipantStatus($participant_status)
    {
        $this->container['participant_status'] = $participant_status;

        return $this;
    }

    /**
     * Gets participant_signup_date
     * @return string
     */
    public function getParticipantSignupDate()
    {
        return $this->container['participant_signup_date'];
    }

    /**
     * Sets participant_signup_date
     * @param string $participant_signup_date
     * @return $this
     */
    public function setParticipantSignupDate($participant_signup_date)
    {
        $this->container['participant_signup_date'] = $participant_signup_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
